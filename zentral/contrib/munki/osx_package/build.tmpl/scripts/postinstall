#!/usr/local/munki/munki-python
import json
import os
import plistlib
import shutil
import ssl
import subprocess
import urllib.request


USER_AGENT = "Zentral/munkipostinstall 0.2"
ENROLLMENT_URL = "%ENROLLMENT_URL%"
ENROLLMENT_SECRET = "%ENROLLMENT_SECRET%"
TLS_SERVER_CERTS = "%TLS_SERVER_CERTS%"
TLS_HOSTNAME = "%TLS_HOSTNAME%"
CLEAN_INSTALL = "%CLEAN_INSTALL%"


MUNKI_DIR = "/usr/local/munki"
ZENTRAL_MUNKI_DIR = "/usr/local/zentral/munki/"
ZENTRAL_MUNKI_POSTFLIGHT_FILE = os.path.join(ZENTRAL_MUNKI_DIR, "zentral_postflight")


def is_clean_install():
    return CLEAN_INSTALL == "YES"


def get_serial_number_and_uuid():
    output = subprocess.check_output(["ioreg", "-a", "-c", "IOPlatformExpertDevice", "-d", "2"])
    ioreg_result = plistlib.loads(output)["IORegistryEntryChildren"][0]
    return ioreg_result["IOPlatformSerialNumber"], ioreg_result["IOPlatformUUID"]


def enroll():
    req = urllib.request.Request(ENROLLMENT_URL)
    req.add_header("User-Agent", USER_AGENT)
    req.add_header("Content-Type", "application/json")
    serial_number, uuid = get_serial_number_and_uuid()
    data = json.dumps({"secret": ENROLLMENT_SECRET,
                       "serial_number": serial_number,
                       "uuid": uuid})
    ctx = ssl.create_default_context(cafile=TLS_SERVER_CERTS or "/private/etc/ssl/cert.pem")
    resp = urllib.request.urlopen(req, data=data.encode("ascii"), context=ctx)
    return json.load(resp)["token"]


def set_postflight_script_token(token):
    with open(ZENTRAL_MUNKI_POSTFLIGHT_FILE, "r") as f:
        script = f.read()
    script = script.replace("%TOKEN%", token)
    with open(ZENTRAL_MUNKI_POSTFLIGHT_FILE, "w") as f:
        f.write(script)


def prepare_munki_preflight_postflight():
    # prepare preflight.d and postflight.d dir
    # save existing scripts
    # install new scripts
    for phase in ("preflight", "postflight"):
        script_path = os.path.join(MUNKI_DIR, phase)
        dir_path = os.path.join(MUNKI_DIR, "{}.d".format(phase))

        # remove old stuff if necessary
        if is_clean_install():
            if os.path.isfile(script_path):
                os.unlink(script_path)
            shutil.rmtree(dir_path, ignore_errors=True)

        # .d dir
        if not os.path.isdir(dir_path):
            os.makedirs(dir_path)

        # dir
        if os.path.isfile(script_path):
            if not os.path.islink(script_path):
                # backup previous script
                script_bckp_path = "{}.bckp".format(script_path)
                os.rename(script_path, script_bckp_path)
            else:
                os.unlink(script_path)

        # install zentral script runner
        ztl_main_script_path = os.path.join(ZENTRAL_MUNKI_DIR, phase)
        os.symlink(ztl_main_script_path, script_path)

        # install zentral script
        ztl_script_install_path = os.path.join(dir_path, "zentral")
        if os.path.exists(ztl_script_install_path):
            os.unlink(ztl_script_install_path)
        ztl_script_path = os.path.join(ZENTRAL_MUNKI_DIR, "zentral_{}".format(phase))
        os.symlink(ztl_script_path, ztl_script_install_path)

        # run script
        if subprocess.call([ztl_script_path, "auto"]):
            print("Could not run the Zentral", phase, "script")


# write zentral base url
def write_zentral_base_url():
    if subprocess.call(["defaults", "write",
                        "/Library/Preferences/io.zentral.plist",
                        "base_url", "https://{}".format(TLS_HOSTNAME)]):
        print("Could not write the base url in the Zentral plist")


if __name__ == "__main__":
    token = enroll()
    set_postflight_script_token(token)
    prepare_munki_preflight_postflight()
    write_zentral_base_url()
