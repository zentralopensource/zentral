# -*- coding: utf-8 -*-
# Generated by Django 1.10.2 on 2016-11-11 02:04
from __future__ import unicode_literals

import json
import yaml
from django.db import migrations
from django.utils.text import slugify
from zentral.core.events.base import EventMetadata
from zentral.core.stores import stores
from zentral.core.stores.backends.elasticsearch import EventStore
from zentral.contrib.osquery.events import OsqueryDistributedQueryResultEvent


def update_elasticsearch_mapping(apps, schema_editor):
    for store in stores:
        if isinstance(store, EventStore):
            doc_type = "osquery_distributed_query_result"
            try:
                store._es.indices.put_mapping(index=store.index,
                                              doc_type=doc_type,
                                              body=EventStore.INDEX_CONF["mappings"][doc_type])
            except Exception as e:
                print("Could not update mapping", e)


def migrate_distributed_queries(apps, schema_editor):
    DistributedQuery = apps.get_model("osquery", "DistributedQuery")
    DistributedQueryProbeMachine = apps.get_model("osquery", "DistributedQueryProbeMachine")
    ProbeSource = apps.get_model("probes", "ProbeSource")
    for dq in DistributedQuery.objects.all():
        query = dq.query
        if not query:
            continue
        body = {'osquery_distributed_query': query}
        inventory_filter = {}
        mbu = dq.meta_business_unit
        if mbu:
            inventory_filter["business_units"] = [mbu.id]
        tags = list(dq.tags.all())
        if tags:
            inventory_filter["tags"] = [t.id for t in tags]
        if inventory_filter:
            body["filters"] = {"inventory": [inventory_filter]}
        ps = ProbeSource(name="Migrated Distributed Query #{}".format(dq.id))
        ps.slug = slugify(ps.name)
        ps.body = yaml.safe_dump(body,
                                 default_flow_style=False,
                                 default_style='')
        ps.status = "INACTIVE"
        ps.model = "zentral.contrib.osquery.probes.OSQueryDistributedQueryProbe"
        ps.apps = ["Osquery"]
        ps.event_types = ["osquery_distributed_query_result"]
        ps.save()
        ps.created_at = dq.created_at
        ps.save()
        for node in dq.distributedquerynode_set.all():
            dqpm = DistributedQueryProbeMachine(probe_source=ps,
                                                machine_serial_number=node.machine_serial_number)
            dqpm.save()
            dqpm.created_at = node.created_at
            dqpm.save()
            ev_md = EventMetadata(OsqueryDistributedQueryResultEvent.event_type,
                                  machine_serial_number=node.machine_serial_number,
                                  tags=['osquery'],
                                  created_at=node.updated_at)
            ev_payload = {"probe": {"id": ps.id, "name": ps.name}}
            try:
                ev_payload['result'] = json.loads(node.result)
            except (TypeError, ValueError):
                ev_payload['error'] = True
            else:
                ev_payload['error'] = False
            ev = OsqueryDistributedQueryResultEvent(ev_md, ev_payload)
            for store in stores:
                store.store(ev)


class Migration(migrations.Migration):

    dependencies = [
        ('osquery', '0006_distributedqueryprobemachine'),
    ]

    operations = [
        migrations.RunPython(update_elasticsearch_mapping),
        migrations.RunPython(migrate_distributed_queries),
    ]
